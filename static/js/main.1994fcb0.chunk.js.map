{"version":3,"sources":["index.js"],"names":["extend","meshline","lines","Array","fill","colors","Fatline","material","useRef","useState","parseInt","length","Math","random","color","ratio","max","width","pos","THREE","map","add","clone","curve","useFrame","current","uniforms","dashOffset","value","onUpdate","self","parent","geometry","setGeometry","args","vertices","getPoints","attach","ref","transparent","depthTest","lineWidth","dashArray","dashRatio","Scene","group","theta","rotation","set","sin","degToRad","_","index","key","App","class","style","background","camera","position","fov","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAQAA,YAAOC,GAEP,IACMC,EAAQ,IAAIC,MADD,KACiBC,OAC5BC,EAAS,CAAC,UAAW,UAAW,UAAW,WAEjD,SAASC,IACP,IAAMC,EAAWC,mBACjB,EAAgBC,oBACd,kBAAMJ,EAAOK,SAASL,EAAOM,OAASC,KAAKC,cADtCC,EAAP,oBAGA,EAAgBL,oBAAS,iBAAM,GAAM,GAAMG,KAAKC,YAAzCE,EAAP,oBACA,EAAgBN,oBAAS,kBAAMG,KAAKI,IAAI,GAAK,GAAMJ,KAAKC,aAAjDI,EAAP,oBAEA,EAAgBR,oBAAS,WACvB,IAAIS,EAAM,IAAIC,UACZ,GAAK,GAAKP,KAAKC,UACd,EACD,GAAK,GAAKD,KAAKC,UAEjB,OAAO,IAAIV,MAAM,IACdC,OACAgB,KAAI,kBACHF,EACGG,IACC,IAAIF,UACF,EAAoB,EAAhBP,KAAKC,SACT,EAAoB,EAAhBD,KAAKC,SACT,EAAoB,GAAhBD,KAAKC,WAGZS,cAjBFC,EAAP,oBAsBA,OADAC,aAAS,kBAAOjB,EAASkB,QAAQC,SAASC,WAAWC,OAAS,QAE5D,8BAEE,8BAAUC,SAAU,SAACC,GAAD,OAAWA,EAAKC,OAAOC,SAAWF,EAAKE,WACzD,8BAAUH,SAAU,SAACC,GAAD,OAAUA,EAAKC,OAAOE,YAAYH,KACpD,sCACEI,KAAM,CAACX,GACPM,SAAU,SAACC,GAAD,OAAWA,EAAKC,OAAOI,SAAWL,EAAKM,UAAU,UAKjE,sCACEC,OAAO,WACPC,IAAK/B,EACLgC,aAAW,EACXC,WAAW,EACXC,UAAWxB,EACXH,MAAOA,EACP4B,UAAW,GACXC,UAAW5B,KAMnB,SAAS6B,IACP,IAAIC,EAAQrC,mBACRsC,EAAQ,EASZ,OAPAtB,aAAS,kBACPqB,EAAMpB,QAAQsB,SAASC,IACrB,EACA,EAAIpC,KAAKqC,IAAI9B,OAAW+B,SAAUJ,GAAS,MAC3C,MAIF,2BAAOR,IAAKO,GACT3C,EAAMkB,KAAI,SAAC+B,EAAGC,GAAJ,OACT,kBAAC9C,EAAD,CAAS+C,IAAKD,QAMtB,SAASE,IACP,OACE,yBAAKC,MAAM,QACT,kBAAC,IAAD,CACEC,MAAO,CAAEC,WAAY,WACrBC,OAAQ,CAAEC,SAAU,CAAC,EAAG,GAAI,IAAKC,IAAK,KAEtC,kBAAChB,EAAD,OAEF,0BAAMW,MAAM,UAAZ,sBAKNM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACT,EAAD,OAEFU,SAASC,eAAe,U","file":"static/js/main.1994fcb0.chunk.js","sourcesContent":["import ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport React, { useState, useRef } from \"react\";\nimport { extend, Canvas, useFrame } from \"react-three-fiber\";\nimport * as meshline from \"three.meshline\";\nimport \"./index.css\";\n\n\nextend(meshline);\n\nconst numLines = 100;\nconst lines = new Array(numLines).fill();\nconst colors = [\"#A2CCB6\", \"#FCEEB5\", \"#EE786E\", \"#EE786E\"];\n\nfunction Fatline() {\n  const material = useRef();\n  const [color] = useState(\n    () => colors[parseInt(colors.length * Math.random())]\n  );\n  const [ratio] = useState(() => 0.5 + 0.5 * Math.random());\n  const [width] = useState(() => Math.max(0.1, 0.3 * Math.random()));\n  // Calculate wiggly curve\n  const [curve] = useState(() => {\n    let pos = new THREE.Vector3(\n      30 - 60 * Math.random(),\n      -5,\n      10 - 20 * Math.random()\n    );\n    return new Array(30)\n      .fill()\n      .map(() =>\n        pos\n          .add(\n            new THREE.Vector3(\n              2 - Math.random() * 4,\n              4 - Math.random() * 2,\n              5 - Math.random() * 10\n            )\n          )\n          .clone()\n      );\n  });\n  // Hook into the render loop and decrease the materials dash-offset\n  useFrame(() => (material.current.uniforms.dashOffset.value -= 0.0005));\n  return (\n    <mesh>\n      {/** MeshLine and CMRCurve are a OOP factories, not scene objects, hence all the imperative code in here :-( */}\n      <meshLine onUpdate={(self) => (self.parent.geometry = self.geometry)}>\n        <geometry onUpdate={(self) => self.parent.setGeometry(self)}>\n          <catmullRomCurve3\n            args={[curve]}\n            onUpdate={(self) => (self.parent.vertices = self.getPoints(500))}\n          />\n        </geometry>\n      </meshLine>\n      {/** MeshLineMaterial on the other hand is a regular material, so we can just attach it */}\n      <meshLineMaterial\n        attach=\"material\"\n        ref={material}\n        transparent\n        depthTest={false}\n        lineWidth={width}\n        color={color}\n        dashArray={0.1}\n        dashRatio={ratio}\n      />\n    </mesh>\n  );\n}\n\nfunction Scene() {\n  let group = useRef();\n  let theta = 0;\n  // Hook into the render loop and rotate the scene a bit\n  useFrame(() =>\n    group.current.rotation.set(\n      0,\n      5 * Math.sin(THREE.Math.degToRad((theta += 0.02))),\n      0\n    )\n  );\n  return (\n    <group ref={group}>\n      {lines.map((_, index) => (\n        <Fatline key={index} />\n      ))}\n    </group>\n  );\n}\n\nfunction App() {\n  return (\n    <div class=\"main\">\n      <Canvas\n        style={{ background: \"#324444\" }}\n        camera={{ position: [0, 50, 10], fov: 75 }}\n      >\n        <Scene />\n      </Canvas>\n      <span class=\"header\">React Three Fiber</span>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}